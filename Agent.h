//****************************************************************************
//
//
//
//****************************************************************************



#ifndef __AGENT_H__
#define __AGENT_H__


// ===========================================================================
//                                  Libraries
// ===========================================================================
#include <cstdio>
#include <cstdlib>



// ===========================================================================
//                                Project Files
// ===========================================================================



// ===========================================================================
//                              Class declarations
// ===========================================================================






class Agent
{
  public :
    
    // =======================================================================
    //                                 Enums
    // =======================================================================
    
    // =======================================================================
    //                               Constructors
    // =======================================================================
    Agent(void);
    Agent(float a_x, float a_y);
    Agent(float a_x, float a_y, float a_vx, float a_vy);

    // =======================================================================
    //                                Destructor
    // =======================================================================
    virtual ~Agent(void);

    // =======================================================================
    //                            Accessors: getters
    // =======================================================================
    virtual float Get_x(void) const =0;
    virtual float Get_y(void) const =0;
    virtual float Get_vx(void) const =0;
    virtual float Get_vy(void) const =0;
    virtual float Get_x_next(void) const =0;
    virtual float Get_y_next(void) const =0;
    virtual float Get_vx_next(void) const =0;
    virtual float Get_vy_next(void) const =0;
    // =======================================================================
    //                            Accessors: setters
    // =======================================================================
    virtual void Set_x(float a_x) =0;
    virtual void Set_y(float a_y) =0;
    virtual void Set_vx(float a_vx) =0;
    virtual void Set_vy(float a_vy) =0;
    virtual void Set_x_next(float a_x) =0;
    virtual void Set_y_next(float a_y) =0;
    virtual void Set_vx_next(float a_vx) =0;
    virtual void Set_vy_next(float a_vy) =0;
    // =======================================================================
    //                                Operators
    // =======================================================================

    // =======================================================================
    //                              Public Methods
    // =======================================================================

    // =======================================================================
    //                             Public Attributes
    // =======================================================================





  protected :

    // =======================================================================
    //                            Forbidden Constructors
    // =======================================================================
    /*Agent(void)
    {
      printf("%s:%d: error: call to forbidden constructor.\n", __FILE__, __LINE__);
      exit(EXIT_FAILURE);
    };*/
    Agent(const Agent &model)
    {
      printf("%s:%d: error: call to forbidden constructor.\n", __FILE__, __LINE__);
      exit(EXIT_FAILURE);
    };


    // =======================================================================
    //                              Protected Methods
    // =======================================================================

    // =======================================================================
    //                             Protected Attributes
    // =======================================================================
    float x;
    float y;
    float vx;
    float vy;
    float x_next;
    float y_next;
    float vx_next;
    float vy_next;
};


// ===========================================================================
//                              Getters' definitions
// ===========================================================================

// ===========================================================================
//                              Setters' definitions
// ===========================================================================

// ===========================================================================
//                             Operators' definitions
// ===========================================================================

// ===========================================================================
//                          Inline functions' definition
// ===========================================================================


#endif // __AGENT_H__

